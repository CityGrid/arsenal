#!/usr/local/bin/python2.7
'''Arsenal client'''
#
#  Copyright 2015 CityGrid Media, LLC
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
import os
import logging
import argparse
import requests

from arsenalclient.client import Client
from arsenalclient.version import __version__
from arsenalclient.cli.common import gen_help
from arsenalclient.cli.data_center import (
    search_data_centers,
    create_data_center,
    delete_data_center,
    )
from arsenalclient.cli.ip_address import (
    search_ip_addresses,
    )
from arsenalclient.cli.network_interface import (
    search_network_interfaces,
    )
from arsenalclient.cli.node import (
    register,
    enc,
    unique_id,
    search_nodes,
    create_node,
    delete_nodes,
    )
from arsenalclient.cli.node_group import (
    search_node_groups,
    create_node_group,
    delete_node_group,
    )
from arsenalclient.cli.status import (
    search_statuses,
    )
from arsenalclient.cli.tag import (
    search_tags,
    create_tag,
    delete_tag,
    )

try:
    import urllib3
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
except (ImportError, AttributeError):
    pass

LOG = logging.getLogger(__name__)

# requests is chatty
logging.getLogger("requests").setLevel(logging.WARNING)
try:
    requests.packages.urllib3.disable_warnings()
except AttributeError:
    pass

def _parse_args():
    '''Parse all the command line arguments.'''

    top_parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
                                         add_help=False)
    main_parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
                                          description='Arsenal CLI')

    main_parser.add_argument('--conf',
                             '-c',
                             dest='conf',
                             help='Configuration file to use',
                             default='/app/arsenal/conf/arsenal.ini')
    main_parser.add_argument('--json',
                             '-j',
                             action='store_true',
                             help='Output raw json instead of formatted output for '
                             'search results.')
    main_parser.add_argument('--kookie',
                             '-k',
                             dest='cookie_file',
                             help='Cookie file to use for auth.',
                             default=os.environ['HOME'] + '/.arsenal_cookie')
    main_parser.add_argument('--login',
                             '-l',
                             dest='user_login',
                             help='Login name making the request.',
                             default=os.environ['USER'])
    main_parser.add_argument('--secrets',
                             '-s',
                             dest='secret_conf',
                             help='Secret config file to use.',
                             default=None)
    main_parser.add_argument('--server',
                             dest='api_host',
                             help='arsenal server to use. Overrides the setting in ' \
                             'the config file.',
                             default=None)
    main_parser.add_argument('--quiet',
                             '-q',
                             action='store_true',
                             help='Only log errors.',
                             default=None)
    main_parser.add_argument('--timestamps',
                             '-t',
                             action='store_true',
                             help='Add timestamps to command line logging.',
                             default=None)
    main_parser.add_argument('--version',
                             '-V',
                             action='version',
                             help='Print the version of the client and exit.',
                             version=__version__)
    main_parser.add_argument('--verbose',
                             '-v',
                             action='store_true',
                             help='Enable verbose logging.',
                             default=None)
    main_parser.add_argument('--debug',
                             '-vv',
                             action='store_true',
                             help='Enable debug logging.',
                             default=None)
    main_parser.add_argument('--write_log',
                             '-w',
                             action='store_true',
                             help='Log messages to the log file',
                             default=None)
    main_parser.add_argument('--yes',
                             '-y',
                             action='store_true',
                             dest="answer_yes",
                             help='answer yes to prompts.')

    # FIXME: Really need a generator for all this. Perhaps one that can take json as an input?
    otsp = main_parser.add_subparsers(title="Object Type",
                                      dest="object_type")

    ### REGISTER
    # This is a bit of a cheat since technically it's not an object type.
    # Putting it at the top level since it is the primary command.
    r_help = ("Register this node to the server.\n\n")
    rotp = otsp.add_parser("register",
                           description=r_help,
                           help=r_help,
                           parents=[top_parser])
    rotp.set_defaults(func=register)

    ### UID
    # This is a bit of a cheat since technically it's not an object type.
    # Print out the unique_id of the current node.
    u_help = ("Print out the unique_id of the current node.\n\n")
    uidotp = otsp.add_parser("uid",
                             description=u_help,
                             help=u_help,
                             parents=[top_parser])
    uidotp.set_defaults(func=unique_id)

    ### NODES
    ### nodes object_type parser (notp)
    n_help = ("Perform actions on the nodes object_type. Use the search \n"
              "action to perform assignment actions such as tagging, \n"
              "assigning node_groups, and setting status.\n\n")
    notp = otsp.add_parser("nodes",
                           description=n_help,
                           help=n_help,
                           parents=[top_parser])

    # nodes action sub-parser (nasp)
    nasp = notp.add_subparsers(title="Actions",
                               dest="action_command")

    # nodes enc subcommand (nesc)
    nesc = nasp.add_parser("enc",
                           help="Run the puppet ENC.",
                           parents=[top_parser])
    nesc.add_argument('--name',
                      '-n',
                      dest='name',
                      help='The fqdn of the node to search for.',
                      required=True,
                      default=None)
    nesc.add_argument('--inspect',
                      dest="inspect",
                      action='store_true',
                      default=None,
                      help='Print what level of the hierarchy the variable ' \
                      'comes from in brackets after each variable.')
    nesc.set_defaults(func=enc)

    # nodes search subcommand (nssc)
    nssc = nasp.add_parser("search",
                           help="Search for node objects and optionally act upon the results.",
                           parents=[top_parser])
    nssc.add_argument('--fields',
                      '-f',
                      dest='fields',
                      help='Comma separated list of fields to display, or \'all\' for all fields.',
                      default=None)
    nssc.add_argument('--exact',
                      action='store_true',
                      dest="exact_get",
                      default=None,
                      help='Exact match search terms.')
    nssc.add_argument('--exclude',
                      dest="exclude",
                      default=None,
                      help='Comma separated list of key=value pairs to exclude.')
    nssc.add_argument('-a',
                      '--audit-history',
                      action='store_true',
                      default=None,
                      help='Show audit history for search results.')

    # nodes assignment action argument group (ansqg)
    ansag = nssc.add_argument_group('Assignment Actions')

    ansag.add_argument('--status',
                       dest="set_status",
                       help='status to assign to the search results.')
    ansag.add_argument('--tag',
                       dest="set_tags",
                       help='Comma separated list of key=value pairs to tag to the search results.')
    ansag.add_argument('--del_tag',
                       dest="del_tags",
                       help='Comma separated list of key=value pairs to un-tag from ' \
                       'the search results.')
    ansag.add_argument('--node_groups',
                       dest="set_node_groups",
                       help='Comma separated list of node_groups to assign to the search results.')
    ansag.add_argument('--del_node_groups',
                       dest="del_node_groups",
                       help='Comma separated list of node_groups to de-assign from the ' \
                       'search results.')
    ansag.add_argument('--del_all_node_groups',
                       dest="del_all_node_groups",
                       action='store_true',
                       help='De-assign ALL node_groups from the search results.')
    nssc.add_argument('search',
                      default=None,
                      metavar='search_terms',
                      help='Comma separated list of key=value pairs to search ' \
                      'for.\n {0}'.format(gen_help('nodes_search')))
    nssc.set_defaults(func=search_nodes)

    # nodes create subcommand (ncsc)
    ncsc = nasp.add_parser("create",
                           description="Create node objects.",
                           help="Create node objects.",
                           parents=[top_parser])

    # nodes required argument group (rncag)
    rncag = ncsc.add_argument_group('required arguments')

    ncsc.add_argument('--hardware_profile_id', '-hp',
                      dest="hardware_profile_id",
                      help='hardware_profile_id to assign.',
                      default=1,)
    ncsc.add_argument('--operating_system_id', '-os',
                      dest="operating_system_id",
                      help='operating_system_id to assign.',
                      default=1,)
    rncag.add_argument('--name', '-n',
                       required=True,
                       dest="node_name",
                       help='node_name to create')
    rncag.add_argument('--unique_id', '-u',
                       required=True,
                       dest="unique_id",
                       help='unique_id to assign.')
    rncag.add_argument('--status_id', '-s',
                       required=True,
                       dest="status_id",
                       help='status_id to assign.')
    rncag.set_defaults(func=create_node)

    # nodes delete subcommand (ndsc)
    ndsc = nasp.add_parser("delete",
                           help='Delete node objects. At least one of name, unique_id, ' \
                           'or id is required',
                           parents=[top_parser])
    ndsc.add_argument('--name', '-n',
                      dest="node_name",
                      help='node_name to delete.')
    ndsc.add_argument('--unique_id', '-u',
                      dest="unique_id",
                      help='unique_id to delete.')
    ndsc.add_argument('--id', '-i',
                      dest="node_id",
                      help='node id to delete.')
    ndsc.set_defaults(func=delete_nodes)

    ### NODE_GROUPS
    ### node_groups object_type parser (ngotp)
    ng_help = ("Perform actions on the node_groups object_type. Use the \n"
               "search action to perform assignment actions such as tagging.\n\n")
    ngotp = otsp.add_parser("node_groups",
                            description=ng_help,
                            help=ng_help,
                            parents=[top_parser])

    # node_groups action sub-parser (ngasp)
    ngasp = ngotp.add_subparsers(title="Available actions",
                                 dest="action_command")
    # node_groups search subcommand (ngssc)
    ngssc = ngasp.add_parser("search",
                             help='Search for node_group objects and optionally ' \
                             'act upon the results.',
                             parents=[top_parser])
    ngssc.add_argument('--fields',
                       '-f',
                       dest='fields',
                       help='Comma separated list of fields to display, or \'all\' for all fields.',
                       default=None)
    ngssc.add_argument('--exact',
                       action='store_true',
                       dest="exact_get",
                       default=None,
                       help='Exact match search terms.')
    ngssc.add_argument('--exclude',
                       dest="exclude",
                       default=None,
                       help='Comma separated list of key=value pairs to exclude.')
    ngssc.add_argument('-a',
                       '--audit-history',
                       action='store_true',
                       default=None,
                       help='Show audit history for search results.')

    # node_groups update action argument group (anguag)
    anguag = ngssc.add_argument_group('Update Actions')

    anguag.add_argument('--description', '-d',
                        dest="node_group_description",
                        help='Update node_group_description.')
    anguag.add_argument('--owner', '-o',
                        dest="node_group_owner",
                        help='Update node_group_owner.')
    anguag.add_argument('--notes-url', '-u',
                        dest="node_group_notes_url",
                        help='Update node_group_notes_url.')

    # node_groups assignment action argument group (angsag)
    angsag = ngssc.add_argument_group('Assignment Actions')

    angsag.add_argument('--tag',
                        dest="set_tags",
                        help='Comma separated list of key=value pairs to tag to the node_group.')
    angsag.add_argument('--del_tag',
                        dest="del_tags",
                        help='Comma separated list of key=value pairs to un-tag from the ' \
                        'search results.')
    ngssc.add_argument('search',
                       default=None,
                       metavar='search_terms',
                       help='Comma separated list of key=value pairs to search ' \
                       'for.\n {0}'.format(gen_help('node_groups_search')))
    ngssc.set_defaults(func=search_node_groups)

    # node_groups create subcommand (ngcsc)
    ngcsc = ngasp.add_parser("create",
                             help="Create node_group objects.",
                             parents=[top_parser])

    # required node_group create argument group (rngcag)
    rngcag = ngcsc.add_argument_group('required arguments')

    rngcag.add_argument('--name', '-n',
                        required=True,
                        dest="node_group_name",
                        help='node_group_name to create.')
    rngcag.add_argument('--description', '-d',
                        required=True,
                        dest="node_group_description",
                        help='node_group_description to assign.')
    rngcag.add_argument('--owner', '-o',
                        required=True,
                        dest="node_group_owner",
                        help='node_group_owner to assign.')
    rngcag.add_argument('--notes-url', '-u',
                        dest="node_group_notes_url",
                        default=None,
                        help='node_group_notes_url to assign.')
    rngcag.set_defaults(func=create_node_group)

    # node_groups delete subcommand (ngdsc)
    ngdsc = ngasp.add_parser("delete",
                             help="Delete node_group objects.",
                             parents=[top_parser])
    # required node_group delete argument group (rngdag)
    rngdag = ngdsc.add_argument_group('required arguments')

    rngdag.add_argument('--name', '-n',
                        required=True,
                        dest="node_group_name",
                        help='node_group_name to delete.')
    ngdsc.set_defaults(func=delete_node_group)

    ### STATUSES
    ### statues object_type parser (sotp)
    s_help = ("Perform actions on the statuses object_type. Use the \n"
              "search action to perform actions such as updating "
              "the description.\n\n")
    sotp = otsp.add_parser('statuses',
                           description=s_help,
                           help=s_help,
                           parents=[top_parser])

    # statuses action sub-parser (sasp)
    sasp = sotp.add_subparsers(title="Available actions",
                               dest="action_command")
    # statuses search subcommand (sssc)
    sssc = sasp.add_parser("search",
                           help="Search for statues objects and optionally act upon the results.",
                           parents=[top_parser])
    sssc.add_argument('--fields',
                      '-f',
                      dest='fields',
                      help='Comma separated list of fields to display, or \'all\' for all fields.',
                      default=None)
    sssc.add_argument('--exact',
                      action='store_true',
                      dest="exact_get",
                      default=None,
                      help='Exact match search terms.')
    sssc.add_argument('--exclude',
                      dest="exclude",
                      default=None,
                      help='Comma separated list of key=value pairs to exclude.')
    sssc.add_argument('-a',
                      '--audit-history',
                      action='store_true',
                      default=None,
                      help='Show audit history for search results.')

    # statuses update action argument group (anguag)
    suag = sssc.add_argument_group('Update Actions')
    suag.add_argument('--description', '-d',
                      dest="statuses_description",
                      help='Update statuses_description.')
    sssc.add_argument('search',
                      default=None,
                      metavar='search_terms',
                      help='Comma separated list of key=value pairs to search ' \
                      'for.\n {0}'.format(gen_help('statuses_search')))
    sssc.set_defaults(func=search_statuses)

    ### TAGS
    ### tags object_type parser (totp)
    t_help = ("Perform actions on the tags object_type. Use the search\n"
              "action to perform assignment actions such as tagging.\n\n")
    totp = otsp.add_parser("tags",
                           description=t_help,
                           help=t_help,
                           parents=[top_parser])

    # tags action sub-parser (tasp)
    tasp = totp.add_subparsers(title="Available actions",
                               dest="action_command")
    # tags search subcommand (tssc)
    tssc = tasp.add_parser("search",
                           help="Search for tags objects and optionally act upon the results.",
                           parents=[top_parser])
    tssc.add_argument('--fields',
                      '-f',
                      dest='fields',
                      help='Comma separated list of fields to display, or \'all\' for all fields.',
                      default=None)
    tssc.add_argument('--exact',
                      action='store_true',
                      dest="exact_get",
                      default=None,
                      help='Exact match search terms.')
    tssc.add_argument('--exclude',
                      dest="exclude",
                      default=None,
                      help='Comma separated list of key=value pairs to exclude.')
    tssc.add_argument('-a',
                      '--audit-history',
                      action='store_true',
                      default=None,
                      help='Show audit history for search results.')

# FIXME: do we want to 'reverse' tag? i.e. select a tag and
# assign it many nodes or nodegroups?
    # tags assignment action argument group (atsag)
    atsag = tssc.add_argument_group('Assignment Actions')

    atsag.add_argument('--tag',
                       dest="set_tags",
                       help='Comma separated list of key=value pairs to tag to the node_group.')
    tssc.add_argument('search',
                      default=None,
                      metavar='search_terms',
                      help='Comma separated list of key=value pairs to search ' \
                      'for.\n {0}'.format(gen_help('tags_search')))
    atsag.set_defaults(func=search_tags)

    # tags create subcommand (tcsc)
    tcsc = tasp.add_parser("create",
                           help="Create tag objects.",
                           parents=[top_parser])

    # required tag create argument group (rtcag)
    rtcag = tcsc.add_argument_group('required arguments')

    rtcag.add_argument('--name', '-n',
                       required=True,
                       dest="tag_name",
                       help='tag_name to create.')
    rtcag.add_argument('--value',
                       required=True,
                       dest="tag_value",
                       help='tag_value to assign to the name.')
    rtcag.set_defaults(func=create_tag)

    # tags delete subcommand (tdsc)
    tdsc = tasp.add_parser("delete",
                           help="Delete tag objects.",
                           parents=[top_parser])

    # required tag delete argument group (rtdag)
    rtdag = tdsc.add_argument_group('required arguments')

    rtdag.add_argument('--name', '-n',
                       required=True,
                       dest="tag_name",
                       help='tag_name to delete.')
    rtdag.add_argument('--value',
                       required=True,
                       dest="tag_value",
                       help='tag_value to delete.')
    tdsc.set_defaults(func=delete_tag)

    ### NETWORK INTERFACES
    ### network_interfaces object_type parser (niotp)
    ni_help = ('Perform actions on the network_interfaces object_type.\n'
               'Currently only searching is supported.\n\n')
    niotp = otsp.add_parser('network_interfaces',
                            description=ni_help,
                            help=ni_help,
                            parents=[top_parser])

    # network_interfaces action sub-parser (niasp)
    niasp = niotp.add_subparsers(title='Actions',
                                 dest='action_command')

    # network_interfaces search subcommand (nissc)
    nissc = niasp.add_parser('search',
                             help='Search for network_interface objects.',
                             parents=[top_parser])
    nissc.add_argument('--fields',
                       '-f',
                       dest='fields',
                       help='Comma separated list of fields to display, or \'all\' for all fields.',
                       default=None)
    nissc.add_argument('--exact',
                       action='store_true',
                       dest='exact_get',
                       default=None,
                       help='Exact match search terms.')
    nissc.add_argument('--exclude',
                       dest='exclude',
                       default=None,
                       help='Comma separated list of key=value pairs to exclude.')
    nissc.add_argument('-a',
                       '--audit-history',
                       action='store_true',
                       default=None,
                       help='Show audit history for search results.')
    nissc.add_argument('search',
                       default=None,
                       metavar='search_terms',
                       help='Comma separated list of key=value pairs to search ' \
                            'for.\n {0}'.format(gen_help('network_interfaces_search')))
    nissc.set_defaults(func=search_network_interfaces)

    ### IP ADDRESSES
    ### ip_addresses object_type parser (iaotp)
    ia_help = ('Perform actions on the ip_addresses object_type.\n'
               'Currently only searching is supported.\n\n')
    iaotp = otsp.add_parser('ip_addresses',
                            description=ia_help,
                            help=ia_help,
                            parents=[top_parser])

    # ip_addresses action sub-parser (iaasp)
    iaasp = iaotp.add_subparsers(title='Actions',
                                 dest='action_command')

    # ip_addresses search subcommand (iassc)
    iassc = iaasp.add_parser('search',
                             help='Search for ip_address objects.',
                             parents=[top_parser])
    iassc.add_argument('--fields',
                       '-f',
                       dest='fields',
                       help='Comma separated list of fields to display, or \'all\' for all fields.',
                       default=None)
    iassc.add_argument('--exact',
                       action='store_true',
                       dest='exact_get',
                       default=None,
                       help='Exact match search terms.')
    iassc.add_argument('--exclude',
                       dest='exclude',
                       default=None,
                       help='Comma separated list of key=value pairs to exclude.')
    iassc.add_argument('-a',
                       '--audit-history',
                       action='store_true',
                       default=None,
                       help='Show audit history for search results.')
    iassc.add_argument('search',
                       default=None,
                       metavar='search_terms',
                       help='Comma separated list of key=value pairs to search ' \
                            'for.\n {0}'.format(gen_help('ip_addresses_search')))
    iassc.set_defaults(func=search_ip_addresses)

    ### DATA_CENTERS
    ### data_centers object_type parser (dcotp)
    dc_help = ('Perform actions on the data_centers object_type. Use the \n'
               'search action to perform assignment actions such as tagging.\n\n')
    dcotp = otsp.add_parser('data_centers',
                            description=dc_help,
                            help=ng_help,
                            parents=[top_parser])

    # data_centers action sub-parser (dcasp)
    dcasp = dcotp.add_subparsers(title='Available actions',
                                 dest='action_command')
    # data_centers search subcommand (dcssc)
    dcssc = dcasp.add_parser('search',
                             help='Search for data_center objects and optionally ' \
                             'act upon the results.',
                             parents=[top_parser])
    dcssc.add_argument('--fields',
                       '-f',
                       dest='fields',
                       help='Comma separated list of fields to display, or \'all\' for all fields.',
                       default=None)
    dcssc.add_argument('--exact',
                       action='store_true',
                       dest='exact_get',
                       default=None,
                       help='Exact match search terms.')
    dcssc.add_argument('--exclude',
                       dest='exclude',
                       default=None,
                       help='Comma separated list of key=value pairs to exclude.')
    dcssc.add_argument('-a',
                       '--audit-history',
                       action='store_true',
                       default=None,
                       help='Show audit history for search results.')

    # data_centers update action argument group (dcuaag)
    dcuaag = dcssc.add_argument_group('Update Actions')

    dcuaag.add_argument('-a1',
                        '--address-1',
                        dest='data_center_address_1',
                        help='Update data_center address 1.')
    dcuaag.add_argument('-a2',
                        '--address-2',
                        dest='data_center_address_2',
                        help='Update data_center address 2.')
    dcuaag.add_argument('-c',
                        '--city',
                        dest='data_center_city',
                        help='Update data_center city.')
    dcuaag.add_argument('-s',
                        '--state',
                        dest='data_center_admin_area',
                        help='Update data_center state.')
    dcuaag.add_argument('-n',
                        '--contact-name',
                        dest='data_center_contact_name',
                        help='Update data_center contact name.')
    dcuaag.add_argument('-C',
                        '--country',
                        dest='data_center_country',
                        help='Update data_center country.')
    dcuaag.add_argument('-P',
                        '--phone-number',
                        dest='data_center_phone_number',
                        help='Update data_center contact phone number.')
    dcuaag.add_argument('-p',
                        '--postal-code',
                        dest='data_center_postal_code',
                        help='Update data_center postal code.')
    dcuaag.add_argument('-r',
                        '--provider',
                        dest='data_center_provider',
                        help='Update data_center provider.')

    # data_centers assignment action argument group (dcaag)
    dcaag = dcssc.add_argument_group('Assignment Actions')

    dcaag.add_argument('--tag',
                       dest='set_tags',
                       help='Comma separated list of key=value pairs to tag to ' \
                       'the search results.')
    dcaag.add_argument('--del_tag',
                       dest='del_tags',
                       help='Comma separated list of key=value pairs to un-tag from the ' \
                       'search results.')
    dcssc.add_argument('search',
                       default=None,
                       metavar='search_terms',
                       help='Comma separated list of key=value pairs to search ' \
                       'for.\n {0}'.format(gen_help('data_centers_search')))
    dcssc.set_defaults(func=search_data_centers)

    # data_centers create subcommand (dccsc)
    dccsc = dcasp.add_parser('create',
                             help='Create data_center objects.',
                             parents=[top_parser])

    # required data_center create argument group (rdccag)
    rdccag = dccsc.add_argument_group('required arguments')

    rdccag.add_argument('--name', '-n',
                        required=True,
                        dest='data_center_name',
                        help='data_center_name to create.')
    rdccag.set_defaults(func=create_data_center)

    # data_centers delete subcommand (dcdsc)
    dcdsc = dcasp.add_parser('delete',
                             help='Delete data_center objects.',
                             parents=[top_parser])

    # required data_center delete argument group (rdcdag)
    rdcdag = dcdsc.add_argument_group('required arguments')

    rdcdag.add_argument('--name', '-n',
                        required=True,
                        dest='data_center_name',
                        help='data_center_name to delete.')
    dcdsc.set_defaults(func=delete_data_center)

    args = main_parser.parse_args()

    if args.object_type == 'nodes' and args.action_command == 'delete':
        if not (args.node_name or args.unique_id or args.node_id):
            ndsc.error('Too few parameters, please specify at least one '
                       'of --name, --unique_id or --id')

    return args

def main():
    '''The earth-shattering kaboom.'''

    # parse the args
    args = _parse_args()

    client = Client(args.conf, args.secret_conf, args)

    # call whatever function was selected
    args.func(args, client)

if __name__ == '__main__':
    main()
