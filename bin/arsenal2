#!/usr/bin/python
#
#  Copyright 2015 CityGrid Media, LLC
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
import os
import sys
import logging
import argparse
import json
import yaml
import collections
import types

import arsenalclientlib as client

log = logging.getLogger(__name__)


def gen_help(help_type):
    """Generte the list of searchable terms for help"""

    terms = {
        'nodes_search': [ 'node_id', 'node_name', 'unique_id', 'status_id',
                          'status', 'hardware_profile_id', 'hardware_profile',
                          'operating_system_id', 'operating_system', 'uptime',
                          'node_groups', 'created', 'updated', 'updated_by',
        ],
        'node_groups_search': [ 'node_group_id', 'node_group_name',
                                'node_group_owner', 'description',
        ],
        'tags_search': [ 'tag_id', 'tag_name', 'tag_value',
        ],
        'hypervisor_vm_assignments_search': [ 'parent_id', 'child_id',
        ],
    }

    return '[ {0} ]'.format(', '.join(sorted(terms[help_type])))


def ask_yes_no(question, answer_yes=None, default='no'):
    """Ask a yes/no question via raw_input() and return their answer.

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits <Enter>.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).

    The "answer" return value is True for "yes" or False for "no".
    """

    if answer_yes:
        return True

    valid = {"yes": True, "y": True, "ye": True,
             "no": False, "n": False}
    if default is None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while True:
        sys.stdout.write(question + prompt)
        choice = raw_input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "
                             "(or 'y' or 'n').\n")


# FIXME: Perhaps can genericize
def a_y_n_nodes(results, answer_yes):
    r_names = []
    for n in results:
        r_names.append('{0}: {1}'.format(n['node_name'], n['unique_id']))
    if ask_yes_no("We are ready to update the following nodes: \n{0}\n Continue?".format("\n".join(r_names)), answer_yes):
        return True


def convert(data):
    """Helper method to format output. (might not be final solution)"""

    if isinstance(data, basestring):
        return str(data)
    elif isinstance(data, collections.Mapping):
        return dict(map(convert, data.iteritems()))
    elif isinstance(data, collections.Iterable):
        return type(data)(map(convert, data))
    else:
        return data


## NODES
def _register(args):
        """Collect all the data about a node and register
           it with the server"""

        data = client.collect_data()

        log.debug('data is: {0}'.format(json.dumps(data, default=lambda o: o.__dict__)))
        client.api_submit('/api/register', data, method='put')


def _search_nodes(args):
    """Search for nodes and perform optional assignment
       actions."""

    log.debug('action_command is: {0}'.format(args.action_command))
    log.debug('object_type is: {0}'.format(args.object_type))

    results = client.object_search(args.object_type, args.search, args.exact_get)

    # FIXME: Ths is going to get ugly real fast
#    actions = ['set_tags', 'set_status', 'set_node_groups', 'del_node_groups']
#    for a in actions:
#        foo = getattr(args, a)()
#        print "FOO IS: ", foo
#        if foo:
#           globals()[foo](args) 
    # FIXME: duped code
    if results:
        if args.set_tags:
            if a_y_n_nodes(results, args.answer_yes):
                client.manage_tag_assignments(args.set_tags, 'node', results)

        if args.del_tags:
            if a_y_n_nodes(results, args.answer_yes):
                client.manage_tag_assignments(args.del_tags, 'node', results, 'delete')

        if args.set_status:
            if a_y_n_nodes(results, args.answer_yes):
                client.set_status(args.set_status, results)

        if args.set_node_groups:
            if a_y_n_nodes(results, args.answer_yes):
                client.manage_node_group_assignments(args.set_node_groups, results, 'put')

        if args.del_node_groups:
            if a_y_n_nodes(results, args.answer_yes):
                client.manage_node_group_assignments(args.del_node_groups, results, 'delete')

        if args.set_hypervisor:
            if a_y_n_nodes(results, args.answer_yes):
                client.manage_hypervisor_assignments(args.set_hypervisor, results)

        if args.del_hypervisor:
            if a_y_n_nodes(results, args.answer_yes):
                client.manage_hypervisor_assignments(args.del_hypervisor, results)

        # Allows for multiple actions to be performed at once.
        if not any((args.set_tags,
                    args.del_tags,
                    args.set_status,
                    args.set_node_groups,
                    args.del_node_groups,
                    args.set_hypervisor,
                    args.del_hypervisor)):

            # FIXME: Doesn't work beyond the top level for individual fields
            if args.fields:
                for r in results:
                    print '- {0}\n'.format(r['node_name'])
#                    print res['status']['status_name']
                    if args.fields == 'all':
                        # FIXME: Is this really the best way?
                        # This produces ugly formatting
                        # print(yaml.safe_dump(r, encoding='utf-8', allow_unicode=True))
                        #print(yaml.dump(r, default_flow_style=False))
                        c = convert(r)
#                        f = (yaml.dump(c, default_flow_style=False, encoding='utf-8', allow_unicode=True, indent=2))
#                        print textwrap.fill(f, initial_indent='', subsequent_indent='    ')
                        print(yaml.dump(c, default_flow_style=False, encoding='utf-8', allow_unicode=True, indent=2))

#                        print json.dumps(r, default=lambda o: o.__dict__, sort_keys=True,
#                                         indent=2, separators=(',', ': ')).

                        #for f in r.keys():
                        #    if f == 'node_name':
                        #        continue
                        #    print '    {0}: {1}'.format(f, r[f])
                    else:
                        for f in list(args.fields.split(",")):
                            if f == 'node_name':
                                continue
                            if type(r[f]) is types.ListType:
                                print '{0}: \n{1}'.format(f, yaml.safe_dump(r[f], encoding='utf-8', allow_unicode=True))
                            else:
                                print '    {0}: {1}'.format(f, r[f])
            # Default to returning just the node name
            else:
                for r in results:
                    print r['node_name']


def _create_node(args):
    """Create a new node."""

    # FIXME: Support hardware_profile, and operating_system?
    # FIXME: do we want exact_get to be optional? i.e. put it in argparse?
    # Check if the node exists (by checking unique_id) first
    # so it can ask if you want to update the existing entry, which
    # essentially would just be changing either the node_name or status_id.
    log.info('Checking if unique_id exists: unique_id={0}'.format(args.unique_id))
    search = 'unique_id={0}'.format(args.unique_id)
    r = client.object_search(args.object_type, search, True)

    if r:
        if ask_yes_no('Entry already exists for unique_id: {0}: {1}\n Would you like to update it?'.format(r[0]['node_name'], r[0]['unique_id']), args.answer_yes):
            log.info('Updating node node_name={0},unique_id={1},status_id={2}'.format(args.node_name, args.unique_id, args.status_id))
            client.create_node(args.unique_id, args.node_name, args.status_id)

    else:
        log.info('Creating node node_name={0},unique_id={1},status_id={2}'.format(args.node_name, args.unique_id, args.status_id))
        client.create_node(args.unique_id, args.node_name, args.status_id)


def _delete_node(args):
    """Delete an existing node."""

    log.debug('action_command is: {0}'.format(args.action_command))
    log.debug('object_type is: {0}'.format(args.object_type))

    if args.node_id:
        api_endpoint = '/api/nodes/{0}'.format(args.node_id)
        r = client.api_submit(api_endpoint, method='get')
        # FIXME: individual records don't return a list. Is that ok, or should the api always return a list?
        if r:
            results = [r]
        else:
            results = None
    else:

        search = ''
        if args.node_name:
            search = 'node_name={0},'.format(args.node_name)
        if args.unique_id:
            search = 'unique_id={0},'.format(args.unique_id)

        # FIXME: do we want exact_get to be optional on delete? i.e. put it in argparse?
        results = client.object_search('nodes', search.rstrip(','), True)

    if results:
        r_names = []
        for n in results:
            r_names.append('{0}: {1}'.format(n['node_name'], n['unique_id']))

        if ask_yes_no("We are ready to delete the following {0}: \n{1}\n Continue?".format(args.object_type, "\n".join(r_names)), args.answer_yes):
            for n in results:
                log.info('Deleting node_name={0},unique_id={1}'.format(n['node_name'], n['unique_id']))
                client.delete_node(n['node_id'])


## NODE_GROUPS
def _search_node_groups(args):
    """Search for node_groups and perform optional assignment
       actions."""

    log.debug('action_command is: {0}'.format(args.action_command))
    log.debug('object_type is: {0}'.format(args.object_type))

    results = client.object_search(args.object_type, args.search, args.exact_get)

    # FIXME: This is very much a dupe of nodes, implimented slightly differently. Undecided on which is better.
    if results:
        r_names = []
        if (args.set_tags or args.del_tags):
            for ng in results:
                r_names.append('node_group_name={0},node_group_id={1}'.format(ng['node_group_name'], ng['node_group_id']))
            if ask_yes_no("We are ready to update the following node_groups: \n{0}\n Continue?".format("\n".join(r_names)), args.answer_yes):
                api_action = 'put'
                tags = args.set_tags
                if args.del_tags:
                    api_action = 'delete'
                    tags = args.del_tags

                client.manage_tag_assignments(tags, 'node_group', results, api_action)

        if not any((args.set_tags, args.del_tags)):

            if args.fields:
                for r in results:
                    print '- {0}'.format(r['node_group_name'])
                    #FIXME: gross output, duplicate code
                    if args.fields == 'all':
                        for f in r.keys():
                            if f == 'node_group_name':
                                continue
                            if type(r[f]) is types.ListType:
                                print '{0}: \n{1}'.format(f, yaml.safe_dump(r[f], encoding='utf-8', allow_unicode=True))
                            else:
                                print '    {0}: {1}'.format(f, r[f])
                    else:
                        for f in list(args.fields.split(",")):
                            if f == 'node_group_name':
                                continue
                            if type(r[f]) is types.ListType:
                                print '{0}: \n{1}'.format(f, yaml.safe_dump(r[f], encoding='utf-8', allow_unicode=True))
                            else:
                                print '    {0}: {1}'.format(f, r[f])

            # Default to returning just the node_group name
            else:
                for r in results:
                    print r['node_group_name']


def _create_node_group(args):
    """Create a new node_group."""

    # FIXME: wrap with some checking to see if it exists.
    client.create_node_group(args.node_group_name, args.node_group_owner, args.node_group_description)


def _delete_node_group(args):
    """Delete an existing node_group."""

    # FIXME: Support name and id or ?
    log.debug('action_command is: {0}'.format(args.action_command))
    log.debug('object_type is: {0}'.format(args.object_type))

    # FIXME: do we want exact_get to be optional on delete? i.e. put it in argparse?
    args.exact_get = True
    search = 'node_group_name={0}'.format(args.node_group_name)
    results = client.object_search(args.object_type, search, args.exact_get)

    if results:
        r_names = []
        for n in results:
            r_names.append(n['node_group_name'])

        if ask_yes_no("We are ready to delete the following {0}: \n{1}\n Continue?".format(args.object_type, "\n".join(r_names)), args.answer_yes):
            for n in results:
                log.info('Deleting node_group_name={0},node_group_id={1}'.format(n['node_group_name'], n['node_group_id']))
                client.delete_node_group(n['node_group_id'])


## TAGS
def _search_tags(args):
    """Search for tags and perform optional assignment
       actions."""

    log.debug('action_command is: {0}'.format(args.action_command))
    log.debug('object_type is: {0}'.format(args.object_type))

    # FIXME: This doesn't exist. Do we want it?
    if args.set_tags:
        set_tag(args)

    # switch to any if there's more than one
    if not args.set_tags:

        results = client.object_search(args.object_type, args.search, args.exact_get)

        if results:
            if args.fields:
                for r in results:
                    print '- {0}'.format(r['tag_name'])
                    if args.fields == 'all':
                        for f in r.keys():
                            if f == 'tag_name':
                                continue
                            print '    {0}: {1}'.format(f, r[f])
                    else:
                        for f in list(args.fields.split(",")):
                            if f == 'tag_name':
                                continue
                            print '    {0}: {1}'.format(f, r[f])
            # Default to returning just the tag name
            else:
                for r in results:
                    print r['tag_name']


def _create_tag(args):
    """Create a new tag."""

    # FIXME: wrap with some checking to see if it exists.
    client.create_tag(args.tag_name, args.tag_value)


def _delete_tag(args):
    """Delete an existing tag."""

    # FIXME: Support name and id or ?

    args.search = 'tag_name={0},tag_value={1}'.format(args.tag_name, args.tag_value)
    # FIXME: do we want exact_get to be optional on delete? i.e. put it in argparse?
    args.exact_get = True
    results = client.object_search(args.object_type, args.search, args.exact_get)

    if results:
        r_names = []
        for n in results:
            r_names.append('{0}={1}'.format(n['tag_name'], n['tag_value']))

        if ask_yes_no("We are ready to delete the following {0}: \n{1}\n Continue?".format(args.object_type, "\n".join(r_names)), args.answer_yes):
            for n in results:
                log.info('Deleting tag_name={0},tag_value={1}'.format(n['tag_name'], n['tag_value']))
                # FIXME: name? id? both?
                client.delete_tag(n['tag_id'])


def _parse_args():
    """Parse all the command line arguments."""

    pp = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, add_help=False)
    mp = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='Arsenal CLI')

    mp.add_argument('--conf',
                   '-c',
                   dest='conf',
                   help='Configuration file to use',
                   default='/app/arsenal/conf/arsenal.ini')
    mp.add_argument('--kookie',
                   '-k',
                   dest='cookie_file',
                   help='Cookie file to use for auth.',
                   default=os.environ['HOME'] + '/.arsenal_cookie')
    mp.add_argument('--login',
                   '-l',
                   dest='user_login',
                   help='Login name making the request.',
                   default=os.environ['USER'])
    mp.add_argument('--secrets',
                   '-s',
                   dest='secret_conf',
                   help='Secret config file to use.',
                   default=None)
    mp.add_argument('--server',
                   dest='api_host',
                   help='arsenal server to use. Overrides the setting in the config file.',
                   default=None)
    mp.add_argument('--quiet',
                   '-q',
                   action='store_true',
                   help='Only log errors.',
                   default=None)
    mp.add_argument('--verbose',
                   '-v',
                   action='store_true',
                   help='Increased logging verbosity',
                   default=None)
    mp.add_argument('--write_log',
                   '-w',
                   action='store_true',
                   help='Log messages to the log file',
                   default=None)
    mp.add_argument('--yes',
                    '-y',
                    action='store_true',
                    dest="answer_yes",
                    help='answer yes to prompts.')
    

    # FIXME: Really need a generator for all this. Perhaps one that can take json as an input?
    otsp = mp.add_subparsers(title="Object Type",
                             dest="object_type")

    ### REGISTER
    # This is a bit of a cheat since technically it's not an object type.
    # Putting it at the top level since it is the primary command.
    r_help = ("Register this node to the server.\n\n")
    rotp = otsp.add_parser("register",
                           description=r_help,
                           help=r_help,
                           parents=[pp])
    rotp.set_defaults(func=_register)

    ### NODES
    ### nodes object_type parser (notp)
    n_help = ("Perform actions on the nodes object_type. Use the search \n"
              "action to perform assignment actions such as tagging, \n"
              "assigning node_groups, and setting status.\n\n")
    notp = otsp.add_parser("nodes",
                           description=n_help,
                           help=n_help,
                           parents=[pp])
    
    # nodes action sub-parser (nasp)
    nasp = notp.add_subparsers(title="Actions",
                               dest="action_command")

    # nodes search subcommand (nssc)
    nssc = nasp.add_parser("search",
                           help="Search for node objects and optionally act upon the results.",
                           parents=[pp])
    nssc.add_argument('--fields',
                      '-f',
                      dest='fields',
                      help='Comma separated list of fields to display, or \'all\' for all fields.',
                      default=None)
    nssc.add_argument('--exact',
                      action='store_true',
                      dest="exact_get",
                      default=None,
                      help='Exact match search terms.')

    # nodes assignment action argument group (ansqg)
    ansag = nssc.add_argument_group('Assignment Actions')

    ansag.add_argument('--status',
                       dest="set_status",
                       help='status to assign to the search results.')
    ansag.add_argument('--tag',
                       dest="set_tags",
                       help='Comma separated list of key=value pairs to tag to the search results.')
    ansag.add_argument('--del_tag',
                       dest="del_tags",
                       help='Comma separated list of key=value pairs to un-tag from the search results.')
    ansag.add_argument('--node_groups',
                       dest="set_node_groups",
                       help='Comma separated list of node_groups to assign to the search results.')
    ansag.add_argument('--del_node_groups',
                       dest="del_node_groups",
                       help='Comma separated list of node_groups to un-assign from the search results.')
    ansag.add_argument('--hypervisor',
                       dest="set_hypervisor",
                       help='The unique_id of the hypervisor that you wish to assign to the search results.')
    ansag.add_argument('--del_hypervisor',
                       dest="del_hypervisor",
                       help='The unique_id of the hypervisor that you wish to de-assign from the search results.')
    nssc.add_argument('search',
                      default=None,
                      metavar='search_terms',
                      help='Comma separated list of key=value pairs to search for.\n {0}'.format(gen_help('nodes_search')))
    nssc.set_defaults(func=_search_nodes)

    # nodes create subcommand (ncsc)
    ncsc = nasp.add_parser("create",
                           description="Create node objects.",
                           help="Create node objects.",
                           parents=[pp])

    # nodes required argument group (rncag)
    rncag = ncsc.add_argument_group('required arguments')

    ncsc.add_argument('--hardware_profile_id', '-hp',
                      dest="hardware_profile_id",
                      help='hardware_profile_id to assign.')
    ncsc.add_argument('--operating_system_id', '-os',
                      dest="operating_system_id",
                      help='operating_system_id to assign.')
    rncag.add_argument('--name', '-n',
                       required=True,
                       dest="node_name",
                       help='node_name to create')
    rncag.add_argument('--unique_id', '-u',
                       required=True,
                       dest="unique_id",
                       help='unique_id to assign.')
    rncag.add_argument('--status_id', '-s',
                       required=True,
                       dest="status_id",
                       help='status_id to assign.')
    rncag.set_defaults(func=_create_node)

    # nodes delete subcommand (ndsc)
    ndsc = nasp.add_parser("delete",
                           help="Delete node objects. At least one of name, unique_id, or id is required",
                           parents=[pp])
    ndsc.add_argument('--name', '-n',
                      dest="node_name",
                      help='node_name to delete.')
    ndsc.add_argument('--unique_id', '-u',
                      dest="unique_id",
                      help='unique_id to delete.')
    ndsc.add_argument('--id', '-i',
                      dest="node_id",
                      help='node_id to delete.')
    ndsc.set_defaults(func=_delete_node)

    ### NODE_GROUPS
    ### node_groups object_type parser (ngotp)
    ng_help = ("Perform actions on the node_groups object_type. Use the \n"
               "search action to perform assignment actions such as tagging.\n\n")
    ngotp = otsp.add_parser("node_groups",
                            description=ng_help,
                            help=ng_help,
                            parents=[pp])

    # node_groups action sub-parser (ngasp)
    ngasp = ngotp.add_subparsers(title="Available actions",
                                 dest="action_command")
    # node_groups search subcommand (ngssc)
    ngssc = ngasp.add_parser("search",
                             help="Search for node_group objects and optionally act upon the results.",
                             parents=[pp])
    ngssc.add_argument('--fields',
                       '-f',
                       dest='fields',
                       help='Comma separated list of fields to display, or \'all\' for all fields.',
                       default=None)
    ngssc.add_argument('--exact',
                       action='store_true',
                       dest="exact_get",
                       default=None,
                       help='Exact match search terms.')

    # node_groups assignment action argument group (angsag)
    angsag = ngssc.add_argument_group('Assignment Actions')

    angsag.add_argument('--tag',
                        dest="set_tags",
                        help='Comma separated list of key=value pairs to tag to the node_group.')
    angsag.add_argument('--del_tag',
                        dest="del_tags",
                        help='Comma separated list of key=value pairs to un-tag from the search results.')
    ngssc.add_argument('search',
                       default=None,
                       metavar='search_terms',
                       help='Comma separated list of key=value pairs to search for.\n {0}'.format(gen_help('node_groups_search')))
    ngssc.set_defaults(func=_search_node_groups)

    # node_groups create subcommand (ngcsc)
    ngcsc = ngasp.add_parser("create",
                             help="Create node_group objects.",
                             parents=[pp])

    # required node_group create argument group (rngcag)
    rngcag = ngcsc.add_argument_group('required arguments')

    rngcag.add_argument('--name', '-n',
                        required=True,
                        dest="node_group_name",
                        help='node_group_name to create.')
    rngcag.add_argument('--description', '-d',
                        required=True,
                        dest="node_group_description",
                        help='node_group_description to assign.')
    rngcag.add_argument('--owner', '-o',
                        required=True,
                        dest="node_group_owner",
                        help='node_group_owner to assign.')
    rngcag.set_defaults(func=_create_node_group)

    # node_groups delete subcommand (ngdsc)
    ngdsc = ngasp.add_parser("delete",
                             help="Delete node_group objects.",
                             parents=[pp])
    # required node_group delete argument group (rngdag)
    rngdag = ngdsc.add_argument_group('required arguments')

    rngdag.add_argument('--name', '-n',
                        required=True,
                        dest="node_group_name",
                        help='node_group_name to delete.')
    ngdsc.set_defaults(func=_delete_node_group)

    ### TAGS
    ### tags object_type parser (totp)
    t_help = ("Perform actions on the tags object_type. Use the search\n"
               "action to perform assignment actions such as tagging.\n\n")
    totp = otsp.add_parser("tags",
                            description=t_help,
                            help=t_help,
                            parents=[pp])

    # tags action sub-parser (tasp)
    tasp = totp.add_subparsers(title="Available actions",
                               dest="action_command")
    # tags search subcommand (tssc)
    tssc = tasp.add_parser("search",
                           help="Search for tags objects and optionally act upon the results.",
                           parents=[pp])
    tssc.add_argument('--fields',
                      '-f',
                      dest='fields',
                      help='Comma separated list of fields to display, or \'all\' for all fields.',
                      default=None)
    tssc.add_argument('--exact',
                      action='store_true',
                      dest="exact_get",
                      default=None,
                      help='Exact match search terms.')

# FIXME: do we want to 'reverse' tag? i.e. select a tag and
# assign it many nodes or nodegroups?
    # tags assignment action argument group (atsag)
    atsag = tssc.add_argument_group('Assignment Actions')

    atsag.add_argument('--tag',
                        dest="set_tags",
                        help='Comma separated list of key=value pairs to tag to the node_group.')
    tssc.add_argument('search',
                      default=None,
                      metavar='search_terms',
                      help='Comma separated list of key=value pairs to search for.\n {0}'.format(gen_help('tags_search')))
    atsag.set_defaults(func=_search_tags)

    # tags create subcommand (tcsc)
    tcsc = tasp.add_parser("create",
                           help="Create tag objects.",
                           parents=[pp])

    # required tag create argument group (rtcag)
    rtcag = tcsc.add_argument_group('required arguments')

    rtcag.add_argument('--name', '-n',
                        required=True,
                        dest="tag_name",
                        help='tag_name to create.')
    rtcag.add_argument('--value',
                        required=True,
                        dest="tag_value",
                        help='tag_value to assign to the name.')
    rtcag.set_defaults(func=_create_tag)

    # tags delete subcommand (tdsc)
    tdsc = tasp.add_parser("delete",
                           help="Delete tag objects.",
                           parents=[pp])

    # required tag delete argument group (rtdag)
    rtdag = tdsc.add_argument_group('required arguments')

    rtdag.add_argument('--name', '-n',
                        required=True,
                        dest="tag_name",
                        help='tag_name to delete.')
    rtdag.add_argument('--value',
                        required=True,
                        dest="tag_value",
                        help='tag_value to delete.')
    tdsc.set_defaults(func=_delete_tag)

    args = mp.parse_args()

    if (args.object_type=='nodes' and args.action_command=='delete'):
        if not (args.node_name or args.unique_id or args.node_id):
            ndsc.error('Too few parameters, please specify at least one of --name, --unique_id or --id')

    return args


def check_root():
    """Check and see if we're running as root"""
    if not os.geteuid() == 0:
        log.error('Login {0} must run as root.'.format(login))
        sys.exit(1)


def main():
    """The earth-shattering kaboom"""

    # parse the args
    args = _parse_args()

    # read in our settings
    client.main(args.conf, args.secret_conf, args)

    # call whatever function was selected
    args.func(args)

if __name__ == '__main__':
    main()
